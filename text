'use client';
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import axios from 'axios';
import { toast } from 'react-toastify';
import { useDispatch } from 'react-redux';
import { getUser } from '@/store/userSlice/userSlice';
import { useRouter } from 'next/navigation';

const Register = ({ isOpen, onClose }) => {
  const router = useRouter()
  const [login, setLogin] = useState(true);
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState({
    name: '',
    email: '',
    password: '',
  });

  const dispatch = useDispatch()

  const handleInputChange = (e) => {
    setData({
      ...data,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Basic validation
    if (!data.email || !data.password || (!login && !data.name)) {
      toast.error('Please fill all required fields');
      return;
    }

    setLoading(true);
    try {
      const url = login ? '/api/login' : '/api/register';
      const res = await axios.post(url, data);
      console.log(res.data.user);
      if(res.data.success === true){
        toast.success(login ? 'Login successful' : 'User registered successfully');
        localStorage.setItem('token', res.data.token);
        dispatch(getUser(res.data.user))
        router.push('/content-library')
        onClose();
      }
    } catch (error) {
      console.error(error);
      toast.error('Invalid Credentials');
    } finally {
      setLoading(false);
    }
    
    setData({
      name:"",
      email:"",
      password:""
    })
  };

  if (!isOpen) return null;

  return (
    <div className="text-white flex justify-center items-center mt-20 absolute lg:left-96 md:left-50 right-0 z-10 border-2 border-gray-400 rounded-lg shadow-lg shadow-slate-600 lg:w-96 max-w-96 bg-black">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.8 }}
        transition={{ duration: 0.3, ease: 'easeOut' }}
        className="p-6 rounded-lg relative bg-black w-full"
      >
        <button
          onClick={onClose}
          className="absolute top-3 right-4 text-2xl cursor-pointer"
        >
          &times;
        </button>
        <h2 className="text-xl font-semibold mb-4 text-center">
          {login ? 'Login' : 'Register'}
        </h2>

        <form onSubmit={handleSubmit}>
          {!login && (
            <input
              type="text"
              placeholder="Username"
              id="name"
              name="name"
              value={data.name}
              onChange={handleInputChange}
              className="border-2 border-gray-400 p-2 w-full rounded-xl mb-4"
            />
          )}

          <input
            type="email"
            placeholder="Email"
            id="email"
            name="email"
            value={data.email}
            onChange={handleInputChange}
            className="border-2 border-gray-400 p-2 w-full rounded-xl mb-4"
          />

          <input
            type="password"
            placeholder="Password"
            id="password"
            name="password"
            value={data.password}
            onChange={handleInputChange}
            className="border-2 border-gray-400 p-2 w-full rounded-xl mb-4"
          />

          <button
            type="submit"
            disabled={loading}
            className={`${
              loading ? 'opacity-50 cursor-not-allowed' : ''
            } bg-[#000] text-white px-4 py-2 rounded-3xl w-full border-2 border-gray-400 hover:bg-[#44448E] transition duration-200`}
          >
            {loading ? 'Please wait...' : login ? 'Login' : 'Register'}
          </button>
        </form>

        <p className="mt-4 text-center">
          {login ? (
            <>
              Don't have an account?{' '}
              <button
                onClick={() => setLogin(false)}
                className="text-blue-500 underline cursor-pointer"
              >
                Register
              </button>
            </>
          ) : (
            <>
              Already have an account?{' '}
              <button
                onClick={() => setLogin(true)}
                className="text-blue-500 underline cursor-pointer"
              >
                Login
              </button>
            </>
          )}
        </p>
      </motion.div>
    </div>
  );
};

export default Register;




{/* <div className="flex justify-between gap-2">
            <div className="flex items-center gap-2">
              <Checkbox id={`${id}-remember`} />
              <Label htmlFor={`${id}-remember`} className="font-normal text-muted-foreground">
                Remember me
              </Label>
            </div>
            <a className="text-sm underline hover:no-underline" href="#">
              Forgot password?
            </a>
          </div> */}